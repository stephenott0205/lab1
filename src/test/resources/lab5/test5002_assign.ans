# Type checking ...
## Undefined
# Stepping ...
##    0:
##  Map()
##  Decl(MVar,x,N(2.0),Binary(Seq,Assign(Var(x),Binary(Plus,Var(x),N(2.0))),Decl(MConst,y,Binary(Plus,Var(x),N(2.0)),Undefined)))
##    1:
##  Map(A(1) -> N(2.0))
##  Binary(Seq,Assign(Unary(Deref,A(1)),Binary(Plus,Unary(Deref,A(1)),N(2.0))),Decl(MConst,y,Binary(Plus,Unary(Deref,A(1)),N(2.0)),Undefined))
##    2:
##  Map(A(1) -> N(2.0))
##  Binary(Seq,Assign(Unary(Deref,A(1)),Binary(Plus,N(2.0),N(2.0))),Decl(MConst,y,Binary(Plus,Unary(Deref,A(1)),N(2.0)),Undefined))
##    3:
##  Map(A(1) -> N(2.0))
##  Binary(Seq,Assign(Unary(Deref,A(1)),N(4.0)),Decl(MConst,y,Binary(Plus,Unary(Deref,A(1)),N(2.0)),Undefined))
##    4:
##  Map(A(1) -> N(4.0))
##  Binary(Seq,N(4.0),Decl(MConst,y,Binary(Plus,Unary(Deref,A(1)),N(2.0)),Undefined))
##    5:
##  Map(A(1) -> N(4.0))
##  Decl(MConst,y,Binary(Plus,Unary(Deref,A(1)),N(2.0)),Undefined)
##    6:
##  Map(A(1) -> N(4.0))
##  Decl(MConst,y,Binary(Plus,N(4.0),N(2.0)),Undefined)
##    7:
##  Map(A(1) -> N(4.0))
##  Decl(MConst,y,N(6.0),Undefined)
## Map(A(1) -> N(4.0))
undefined
